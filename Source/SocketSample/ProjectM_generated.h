// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROJECTM_PROJECTM_ACTOR_H_
#define FLATBUFFERS_GENERATED_PROJECTM_PROJECTM_ACTOR_H_

#include "flatbuffers/flatbuffers.h"

namespace ProjectM {
namespace Actor {

struct Vec3;

struct Transform;

struct C2S_Login;
struct C2S_LoginBuilder;
struct C2S_LoginT;

struct S2C_Login;
struct S2C_LoginBuilder;
struct S2C_LoginT;

struct S2C_SpawnActors;
struct S2C_SpawnActorsBuilder;
struct S2C_SpawnActorsT;

struct S2C_DestroyActor;
struct S2C_DestroyActorBuilder;
struct S2C_DestroyActorT;

struct C2S_SyncLocation;
struct C2S_SyncLocationBuilder;
struct C2S_SyncLocationT;

struct S2C_SyncLocation;
struct S2C_SyncLocationBuilder;
struct S2C_SyncLocationT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(float _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(float _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
  void mutate_z(float _z) {
    flatbuffers::WriteScalar(&z_, _z);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Transform FLATBUFFERS_FINAL_CLASS {
 private:
  ProjectM::Actor::Vec3 location_;
  ProjectM::Actor::Vec3 rotation_;
  ProjectM::Actor::Vec3 scale_;

 public:
  Transform()
      : location_(),
        rotation_(),
        scale_() {
  }
  Transform(const ProjectM::Actor::Vec3 &_location, const ProjectM::Actor::Vec3 &_rotation, const ProjectM::Actor::Vec3 &_scale)
      : location_(_location),
        rotation_(_rotation),
        scale_(_scale) {
  }
  const ProjectM::Actor::Vec3 &location() const {
    return location_;
  }
  ProjectM::Actor::Vec3 &mutable_location() {
    return location_;
  }
  const ProjectM::Actor::Vec3 &rotation() const {
    return rotation_;
  }
  ProjectM::Actor::Vec3 &mutable_rotation() {
    return rotation_;
  }
  const ProjectM::Actor::Vec3 &scale() const {
    return scale_;
  }
  ProjectM::Actor::Vec3 &mutable_scale() {
    return scale_;
  }
};
FLATBUFFERS_STRUCT_END(Transform, 36);

struct C2S_LoginT : public flatbuffers::NativeTable {
  typedef C2S_Login TableType;
  std::string token{};
};

struct C2S_Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef C2S_LoginT NativeTableType;
  typedef C2S_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4
  };
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  flatbuffers::String *mutable_token() {
    return GetPointer<flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
  C2S_LoginT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_LoginT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<C2S_Login> Pack(flatbuffers::FlatBufferBuilder &_fbb, const C2S_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_LoginBuilder {
  typedef C2S_Login Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(C2S_Login::VT_TOKEN, token);
  }
  explicit C2S_LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<C2S_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<C2S_Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<C2S_Login> CreateC2S_Login(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> token = 0) {
  C2S_LoginBuilder builder_(_fbb);
  builder_.add_token(token);
  return builder_.Finish();
}

inline flatbuffers::Offset<C2S_Login> CreateC2S_LoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return ProjectM::Actor::CreateC2S_Login(
      _fbb,
      token__);
}

flatbuffers::Offset<C2S_Login> CreateC2S_Login(flatbuffers::FlatBufferBuilder &_fbb, const C2S_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_LoginT : public flatbuffers::NativeTable {
  typedef S2C_Login TableType;
  uint64_t actor_id = 0;
};

struct S2C_Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_LoginT NativeTableType;
  typedef S2C_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTOR_ID = 4
  };
  uint64_t actor_id() const {
    return GetField<uint64_t>(VT_ACTOR_ID, 0);
  }
  bool mutate_actor_id(uint64_t _actor_id) {
    return SetField<uint64_t>(VT_ACTOR_ID, _actor_id, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ACTOR_ID) &&
           verifier.EndTable();
  }
  S2C_LoginT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_LoginT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<S2C_Login> Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_LoginBuilder {
  typedef S2C_Login Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_actor_id(uint64_t actor_id) {
    fbb_.AddElement<uint64_t>(S2C_Login::VT_ACTOR_ID, actor_id, 0);
  }
  explicit S2C_LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_Login> CreateS2C_Login(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t actor_id = 0) {
  S2C_LoginBuilder builder_(_fbb);
  builder_.add_actor_id(actor_id);
  return builder_.Finish();
}

flatbuffers::Offset<S2C_Login> CreateS2C_Login(flatbuffers::FlatBufferBuilder &_fbb, const S2C_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_SpawnActorsT : public flatbuffers::NativeTable {
  typedef S2C_SpawnActors TableType;
  std::vector<uint64_t> actor_id{};
  std::vector<ProjectM::Actor::Transform> transform{};
};

struct S2C_SpawnActors FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_SpawnActorsT NativeTableType;
  typedef S2C_SpawnActorsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTOR_ID = 4,
    VT_TRANSFORM = 6
  };
  const flatbuffers::Vector<uint64_t> *actor_id() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_ACTOR_ID);
  }
  flatbuffers::Vector<uint64_t> *mutable_actor_id() {
    return GetPointer<flatbuffers::Vector<uint64_t> *>(VT_ACTOR_ID);
  }
  const flatbuffers::Vector<const ProjectM::Actor::Transform *> *transform() const {
    return GetPointer<const flatbuffers::Vector<const ProjectM::Actor::Transform *> *>(VT_TRANSFORM);
  }
  flatbuffers::Vector<const ProjectM::Actor::Transform *> *mutable_transform() {
    return GetPointer<flatbuffers::Vector<const ProjectM::Actor::Transform *> *>(VT_TRANSFORM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTOR_ID) &&
           verifier.VerifyVector(actor_id()) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyVector(transform()) &&
           verifier.EndTable();
  }
  S2C_SpawnActorsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_SpawnActorsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<S2C_SpawnActors> Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnActorsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_SpawnActorsBuilder {
  typedef S2C_SpawnActors Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_actor_id(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> actor_id) {
    fbb_.AddOffset(S2C_SpawnActors::VT_ACTOR_ID, actor_id);
  }
  void add_transform(flatbuffers::Offset<flatbuffers::Vector<const ProjectM::Actor::Transform *>> transform) {
    fbb_.AddOffset(S2C_SpawnActors::VT_TRANSFORM, transform);
  }
  explicit S2C_SpawnActorsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_SpawnActors> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_SpawnActors>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_SpawnActors> CreateS2C_SpawnActors(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> actor_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<const ProjectM::Actor::Transform *>> transform = 0) {
  S2C_SpawnActorsBuilder builder_(_fbb);
  builder_.add_transform(transform);
  builder_.add_actor_id(actor_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<S2C_SpawnActors> CreateS2C_SpawnActorsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *actor_id = nullptr,
    const std::vector<ProjectM::Actor::Transform> *transform = nullptr) {
  auto actor_id__ = actor_id ? _fbb.CreateVector<uint64_t>(*actor_id) : 0;
  auto transform__ = transform ? _fbb.CreateVectorOfStructs<ProjectM::Actor::Transform>(*transform) : 0;
  return ProjectM::Actor::CreateS2C_SpawnActors(
      _fbb,
      actor_id__,
      transform__);
}

flatbuffers::Offset<S2C_SpawnActors> CreateS2C_SpawnActors(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnActorsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_DestroyActorT : public flatbuffers::NativeTable {
  typedef S2C_DestroyActor TableType;
  uint64_t actor_id = 0;
};

struct S2C_DestroyActor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_DestroyActorT NativeTableType;
  typedef S2C_DestroyActorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTOR_ID = 4
  };
  uint64_t actor_id() const {
    return GetField<uint64_t>(VT_ACTOR_ID, 0);
  }
  bool mutate_actor_id(uint64_t _actor_id) {
    return SetField<uint64_t>(VT_ACTOR_ID, _actor_id, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ACTOR_ID) &&
           verifier.EndTable();
  }
  S2C_DestroyActorT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_DestroyActorT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<S2C_DestroyActor> Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_DestroyActorT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_DestroyActorBuilder {
  typedef S2C_DestroyActor Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_actor_id(uint64_t actor_id) {
    fbb_.AddElement<uint64_t>(S2C_DestroyActor::VT_ACTOR_ID, actor_id, 0);
  }
  explicit S2C_DestroyActorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_DestroyActor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_DestroyActor>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_DestroyActor> CreateS2C_DestroyActor(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t actor_id = 0) {
  S2C_DestroyActorBuilder builder_(_fbb);
  builder_.add_actor_id(actor_id);
  return builder_.Finish();
}

flatbuffers::Offset<S2C_DestroyActor> CreateS2C_DestroyActor(flatbuffers::FlatBufferBuilder &_fbb, const S2C_DestroyActorT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_SyncLocationT : public flatbuffers::NativeTable {
  typedef C2S_SyncLocation TableType;
  uint64_t actor_id = 0;
  std::unique_ptr<ProjectM::Actor::Transform> transform{};
};

struct C2S_SyncLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef C2S_SyncLocationT NativeTableType;
  typedef C2S_SyncLocationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTOR_ID = 4,
    VT_TRANSFORM = 6
  };
  uint64_t actor_id() const {
    return GetField<uint64_t>(VT_ACTOR_ID, 0);
  }
  bool mutate_actor_id(uint64_t _actor_id) {
    return SetField<uint64_t>(VT_ACTOR_ID, _actor_id, 0);
  }
  const ProjectM::Actor::Transform *transform() const {
    return GetStruct<const ProjectM::Actor::Transform *>(VT_TRANSFORM);
  }
  ProjectM::Actor::Transform *mutable_transform() {
    return GetStruct<ProjectM::Actor::Transform *>(VT_TRANSFORM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ACTOR_ID) &&
           VerifyField<ProjectM::Actor::Transform>(verifier, VT_TRANSFORM) &&
           verifier.EndTable();
  }
  C2S_SyncLocationT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_SyncLocationT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<C2S_SyncLocation> Pack(flatbuffers::FlatBufferBuilder &_fbb, const C2S_SyncLocationT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_SyncLocationBuilder {
  typedef C2S_SyncLocation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_actor_id(uint64_t actor_id) {
    fbb_.AddElement<uint64_t>(C2S_SyncLocation::VT_ACTOR_ID, actor_id, 0);
  }
  void add_transform(const ProjectM::Actor::Transform *transform) {
    fbb_.AddStruct(C2S_SyncLocation::VT_TRANSFORM, transform);
  }
  explicit C2S_SyncLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<C2S_SyncLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<C2S_SyncLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<C2S_SyncLocation> CreateC2S_SyncLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t actor_id = 0,
    const ProjectM::Actor::Transform *transform = 0) {
  C2S_SyncLocationBuilder builder_(_fbb);
  builder_.add_actor_id(actor_id);
  builder_.add_transform(transform);
  return builder_.Finish();
}

flatbuffers::Offset<C2S_SyncLocation> CreateC2S_SyncLocation(flatbuffers::FlatBufferBuilder &_fbb, const C2S_SyncLocationT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_SyncLocationT : public flatbuffers::NativeTable {
  typedef S2C_SyncLocation TableType;
  uint64_t actor_id = 0;
  std::unique_ptr<ProjectM::Actor::Transform> transform{};
};

struct S2C_SyncLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_SyncLocationT NativeTableType;
  typedef S2C_SyncLocationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTOR_ID = 4,
    VT_TRANSFORM = 6
  };
  uint64_t actor_id() const {
    return GetField<uint64_t>(VT_ACTOR_ID, 0);
  }
  bool mutate_actor_id(uint64_t _actor_id) {
    return SetField<uint64_t>(VT_ACTOR_ID, _actor_id, 0);
  }
  const ProjectM::Actor::Transform *transform() const {
    return GetStruct<const ProjectM::Actor::Transform *>(VT_TRANSFORM);
  }
  ProjectM::Actor::Transform *mutable_transform() {
    return GetStruct<ProjectM::Actor::Transform *>(VT_TRANSFORM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ACTOR_ID) &&
           VerifyField<ProjectM::Actor::Transform>(verifier, VT_TRANSFORM) &&
           verifier.EndTable();
  }
  S2C_SyncLocationT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_SyncLocationT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<S2C_SyncLocation> Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SyncLocationT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_SyncLocationBuilder {
  typedef S2C_SyncLocation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_actor_id(uint64_t actor_id) {
    fbb_.AddElement<uint64_t>(S2C_SyncLocation::VT_ACTOR_ID, actor_id, 0);
  }
  void add_transform(const ProjectM::Actor::Transform *transform) {
    fbb_.AddStruct(S2C_SyncLocation::VT_TRANSFORM, transform);
  }
  explicit S2C_SyncLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_SyncLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_SyncLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_SyncLocation> CreateS2C_SyncLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t actor_id = 0,
    const ProjectM::Actor::Transform *transform = 0) {
  S2C_SyncLocationBuilder builder_(_fbb);
  builder_.add_actor_id(actor_id);
  builder_.add_transform(transform);
  return builder_.Finish();
}

flatbuffers::Offset<S2C_SyncLocation> CreateS2C_SyncLocation(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SyncLocationT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline C2S_LoginT *C2S_Login::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_LoginT>(new C2S_LoginT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_Login::UnPackTo(C2S_LoginT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = token(); if (_e) _o->token = _e->str(); }
}

inline flatbuffers::Offset<C2S_Login> C2S_Login::Pack(flatbuffers::FlatBufferBuilder &_fbb, const C2S_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_Login(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<C2S_Login> CreateC2S_Login(flatbuffers::FlatBufferBuilder &_fbb, const C2S_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const C2S_LoginT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _token = _o->token.empty() ? 0 : _fbb.CreateString(_o->token);
  return ProjectM::Actor::CreateC2S_Login(
      _fbb,
      _token);
}

inline S2C_LoginT *S2C_Login::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_LoginT>(new S2C_LoginT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_Login::UnPackTo(S2C_LoginT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = actor_id(); _o->actor_id = _e; }
}

inline flatbuffers::Offset<S2C_Login> S2C_Login::Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_Login(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<S2C_Login> CreateS2C_Login(flatbuffers::FlatBufferBuilder &_fbb, const S2C_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const S2C_LoginT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _actor_id = _o->actor_id;
  return ProjectM::Actor::CreateS2C_Login(
      _fbb,
      _actor_id);
}

inline S2C_SpawnActorsT *S2C_SpawnActors::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_SpawnActorsT>(new S2C_SpawnActorsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_SpawnActors::UnPackTo(S2C_SpawnActorsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = actor_id(); if (_e) { _o->actor_id.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->actor_id[_i] = _e->Get(_i); } } }
  { auto _e = transform(); if (_e) { _o->transform.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->transform[_i] = *_e->Get(_i); } } }
}

inline flatbuffers::Offset<S2C_SpawnActors> S2C_SpawnActors::Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnActorsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_SpawnActors(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<S2C_SpawnActors> CreateS2C_SpawnActors(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnActorsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const S2C_SpawnActorsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _actor_id = _o->actor_id.size() ? _fbb.CreateVector(_o->actor_id) : 0;
  auto _transform = _o->transform.size() ? _fbb.CreateVectorOfStructs(_o->transform) : 0;
  return ProjectM::Actor::CreateS2C_SpawnActors(
      _fbb,
      _actor_id,
      _transform);
}

inline S2C_DestroyActorT *S2C_DestroyActor::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_DestroyActorT>(new S2C_DestroyActorT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_DestroyActor::UnPackTo(S2C_DestroyActorT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = actor_id(); _o->actor_id = _e; }
}

inline flatbuffers::Offset<S2C_DestroyActor> S2C_DestroyActor::Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_DestroyActorT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_DestroyActor(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<S2C_DestroyActor> CreateS2C_DestroyActor(flatbuffers::FlatBufferBuilder &_fbb, const S2C_DestroyActorT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const S2C_DestroyActorT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _actor_id = _o->actor_id;
  return ProjectM::Actor::CreateS2C_DestroyActor(
      _fbb,
      _actor_id);
}

inline C2S_SyncLocationT *C2S_SyncLocation::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_SyncLocationT>(new C2S_SyncLocationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_SyncLocation::UnPackTo(C2S_SyncLocationT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = actor_id(); _o->actor_id = _e; }
  { auto _e = transform(); if (_e) _o->transform = std::unique_ptr<ProjectM::Actor::Transform>(new ProjectM::Actor::Transform(*_e)); }
}

inline flatbuffers::Offset<C2S_SyncLocation> C2S_SyncLocation::Pack(flatbuffers::FlatBufferBuilder &_fbb, const C2S_SyncLocationT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_SyncLocation(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<C2S_SyncLocation> CreateC2S_SyncLocation(flatbuffers::FlatBufferBuilder &_fbb, const C2S_SyncLocationT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const C2S_SyncLocationT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _actor_id = _o->actor_id;
  auto _transform = _o->transform ? _o->transform.get() : 0;
  return ProjectM::Actor::CreateC2S_SyncLocation(
      _fbb,
      _actor_id,
      _transform);
}

inline S2C_SyncLocationT *S2C_SyncLocation::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_SyncLocationT>(new S2C_SyncLocationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_SyncLocation::UnPackTo(S2C_SyncLocationT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = actor_id(); _o->actor_id = _e; }
  { auto _e = transform(); if (_e) _o->transform = std::unique_ptr<ProjectM::Actor::Transform>(new ProjectM::Actor::Transform(*_e)); }
}

inline flatbuffers::Offset<S2C_SyncLocation> S2C_SyncLocation::Pack(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SyncLocationT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_SyncLocation(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<S2C_SyncLocation> CreateS2C_SyncLocation(flatbuffers::FlatBufferBuilder &_fbb, const S2C_SyncLocationT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const S2C_SyncLocationT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _actor_id = _o->actor_id;
  auto _transform = _o->transform ? _o->transform.get() : 0;
  return ProjectM::Actor::CreateS2C_SyncLocation(
      _fbb,
      _actor_id,
      _transform);
}

}  // namespace Actor
}  // namespace ProjectM

#endif  // FLATBUFFERS_GENERATED_PROJECTM_PROJECTM_ACTOR_H_
